import { writable } from "svelte/store";
import { exclude } from 'utils/exclude'

/**
 * 
 * @param {import('axios').AxiosInstance} client 
 */
function _createUser(client) {
  const state = {
    token: localStorage.getItem("ukanlearn_token") || null,
    username: null,
    email: null,
    drafts: null,
    historic: null,
    role: null,
    timestamps: {
      created_at: null,
      updated_at: null
    }
  };

  const { set, update, subscribe } = writable(state);

  return {
    set,
    update,
    subscribe,
    async fetchMe() {
      try {
        const { data: { user: data } } = await client.get('/users/me')
        update(v => ({
          ...v, ...exclude(data, ["_id", "created_at, updated_at", "password"]), timestamps: {
            created_at: data.created_at, updated_at: data.updated_at
          }
        }))
        return null
      } catch (error) {
        return error
      }
    },
    async logout() {
      this.reset()
    },
    reset() {
      set({ ...state, token: null })
      localStorage.removeItem("ukanlearn_token")
    },
    /**
     * 
     * @param {string} email 
     * @param {string} password 
     */
    async login(email, password) {
      try {
        const r = await client.post('/auth/login', {
          email, password
        })
        if (r.data.token) {
          update(n => ({ ...n, token: r.data.token }))
          localStorage.setItem('ukanlearn_token', r.data.token)
        }
        return null
      } catch (error) {
        return error
      }
    }
  };
}

export let user = null;

/**
 * 
 * @param {import('axios').AxiosInstance} client 
 */
export function createUser(client) {
  user = _createUser(client)
  user.fetchMe()
}