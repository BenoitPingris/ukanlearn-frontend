import { writable, get } from "svelte/store";
import { user } from './user'
import { toasts } from './toasts'

/**
 * 
 * @param {import('axios').AxiosInstance} client 
 */
function _createEditor(client) {
	const state = {
		musicName: '',
		autor: '',
		instrument: 'guitar',
		chords: []
	};

	const { set, update, subscribe } = writable(state);

	return {
		set,
		update,
		subscribe,
		addChord(chord) {
			update(n => ({ ...n, chords: [...n.chords, chord] }))
		},
		removeChord(index) {
			update(n => {
				n.chords.splice(index, 1)
				return n
			})
		},
		reset() {
			set(state)
		},
		async saveDraft(draftID) {
			const $editor = get({ subscribe });
			if ($editor.chords.length == 0 && $editor.musicName.length < 5) {
				return toasts.warning(
					"Le nom de la musique doit faire au moins 5 caracteres"
				);
			};
			try {
				const { data } = await client.put("/users/me/drafts", {
					id: draftID,
					name: $editor.musicName,
					chords: $editor.chords.map(o => o.name),
					instrument: $editor.instrument
				});
				toasts.success(
					"Votre musique a ete sauvegarde dans vos brouillons",
					5000
				);
				return { data, error: null }
			} catch (error) {
				toasts.warning(
					"Une erreur est survenue lors de la sauvegarde du brouillon"
				);
				return { error, data: null }
			}
		},
		async save() {
			const $editor = get({ subscribe });
			const $user = get(user);
			if ($editor.chords.length == 0 && $editor.musicName.length < 5) {
				return toasts.warning(
					"Le nom de la musique doit faire au moins 5 caracteres"
				);
			};
			try {
				const { data } = await client.post("/musics", {
					name: $editor.musicName,
					chords: $editor.chords.map(o => o.name),
					author: $user.username,
					instrument: $editor.instrument
				});
				toasts.success("Musique sauvegardée avec succés");
				return { data, error: null }
			} catch (error) {
				toasts.error("Une erreur est survenue");
				return { error, data: null }
			}
		}
	};
}

export let editor = null;

/**
 * 
 * @param {import('axios').AxiosInstance} client 
 */
export function createEditor(client) {
	editor = _createEditor(client)
}