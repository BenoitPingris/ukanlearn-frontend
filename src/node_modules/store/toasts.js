
import { writable, get } from "svelte/store";

function uuidv4() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
    const r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

function createToasts() {
  const state = [];

  const { set, update, subscribe } = writable(state);

  return {
    set,
    update,
    subscribe,
    add(props) {
      if (typeof props === 'string') props = { message: props, theme: 'primary' }
      props = { ...props, id: uuidv4() }
      if (props.timeout) {
        setTimeout(() => this.removebyID(props.id), props.timeout)
      }
      update(v => {
        return ([...v, props])
      })
    },
    warning(message, timeout = null) {
      this.add({ theme: "warning", message, timeout })
    },
    success(message, timeout = null) {
      this.add({ theme: "success", message, timeout })
    },
    danger(message, timeout = null) {
      this.add({ theme: "danger", message, timeout })
    },
    primary(message, timeout = null) {
      this.add({ theme: "primary", message, timeout })
    },
    removebyID(id) {
      const v = get(this)
      const position = v.findIndex(o => o.id === id)
      if (position !== -1) {
        this.remove(position)
      }
    },
    remove(index) {
      update(n => {
        n.splice(index, 1)
        return n
      })
    }
  };
}

export let toasts = createToasts();
